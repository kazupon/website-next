(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{"./docs/langs/en-US/getting-started/cli-usage.mdx":function(e,n,t){"use strict";t.r(n);var i=t("./node_modules/react/index.js"),a=t.n(i),s=t("./node_modules/@mdx-js/tag/dist/index.js");function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}n.default=function(e){var n=e.components;o(e,["components"]);return a.a.createElement(s.MDXTag,{name:"wrapper",components:n},a.a.createElement(s.MDXTag,{name:"h1",components:n,props:{id:"cli-usage"}},"CLI Usage"),a.a.createElement(s.MDXTag,{name:"p",components:n},a.a.createElement(s.MDXTag,{name:"strong",components:n,parentName:"p"},"Contents")),a.a.createElement(s.MDXTag,{name:"ul",components:n},a.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},a.a.createElement(s.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#using-the-compiler"}},"Using the compiler")),a.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},a.a.createElement(s.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"#scaffolding-with-asinit"}},"Scaffolding with asinit"))),a.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"using-the-compiler"}},"Using the compiler"),a.a.createElement(s.MDXTag,{name:"p",components:n},"Similar to TypeScript's ",a.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"tsc")," compiling to JavaScript, AssemblyScript's ",a.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"asc")," compiles to WebAssembly:"),a.a.createElement(s.MDXTag,{name:"pre",components:n},a.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{metaString:null}},"Syntax:   asc [entryFile ...] [options]\n\nExamples: asc hello.ts\n          asc hello.ts -b hello.wasm -t hello.wat\n          asc hello1.ts hello2.ts -b -O > hello.wasm\n\nOptions:\n --version, -v          Prints just the compiler's version and exits.\n --help, -h             Prints this message and exits.\n --optimize, -O         Optimizes the module. Also accepts the optimize level:\n\n                         -O     Uses defaults. Equivalent to -O2s\n                         -O0    Equivalent to --optimizeLevel 0\n                         -O1    Equivalent to --optimizeLevel 1\n                         -O2    Equivalent to --optimizeLevel 2\n                         -O3    Equivalent to --optimizeLevel 3\n                         -Oz    Equivalent to -O but with --shrinkLevel 2\n                         -O3s   Equivalent to -O3 with --shrinkLevel 1 etc.\n\n --optimizeLevel        How much to focus on optimizing code. [0-3]\n --shrinkLevel          How much to focus on shrinking code size. [0-2, s=1, z=2]\n --validate, -c         Validates the module using Binaryen. Exits if invalid.\n --baseDir              Specifies the base directory of input and output files.\n --outFile, -o          Specifies the output file. File extension indicates format.\n --binaryFile, -b       Specifies the binary output file (.wasm).\n --textFile, -t         Specifies the text output file (.wat).\n --asmjsFile, -a        Specifies the asm.js output file (.js).\n --idlFile, -i          Specifies the WebIDL output file (.webidl).\n --tsdFile, -d          Specifies the TypeScript definition output file (.d.ts).\n --sourceMap            Enables source map generation. Optionally takes the URL\n                        used to reference the source map from the binary file.\n --noTreeShaking        Disables compiler-level tree-shaking, compiling everything.\n --noDebug              Disables maintaining of debug information in binaries.\n --noAssert             Replaces assertions with just their value without trapping.\n --noEmit               Performs compilation as usual but does not emit code.\n --noMemory             Does not set up a memory. Useful for low-level WebAssembly.\n --importMemory         Imports the memory instance provided by the embedder.\n --memoryBase           Sets the start offset of compiler-generated static memory.\n --importTable          Imports the function table instance provided by the embedder.\n --noLib                Does not include the shipped standard library.\n --lib                  Adds one or multiple paths to custom library components and\n                        uses exports of all top-level files at this path as globals.\n --use, -u              Aliases a global object under another name, e.g., to switch\n                        the default 'Math' implementation used: --use Math=JSMath\n --trapMode             Sets the trap mode to use.\n\n                         allow  Allow trapping operations. This is the default.\n                         clamp  Replace trapping operations with clamping semantics.\n                         js     Replace trapping operations with JS semantics.\n\n --runPasses            Specifies additional Binaryen passes to run after other\n                        optimizations, if any. See: Binaryen/src/passes/pass.cpp\n --feature              Enables additional (experimental) WebAssembly features.\n\n                         sign-extension  Enables sign-extension operations\n                         mutable-global  Enables mutable global imports and exports\n\n --transform           Specifies the path to a custom transform to 'require'.\n\n --measure              Prints measuring information on I/O and compile times.\n")),a.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"scaffolding-with-asinit"}},"Scaffolding with asinit"),a.a.createElement(s.MDXTag,{name:"p",components:n},"Once AssemblyScript ",a.a.createElement(s.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/AssemblyScript/assemblyscript#installation"}},"has been installed"),", it provides a handly little tool to scaffold a new project:"),a.a.createElement(s.MDXTag,{name:"pre",components:n},a.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{metaString:null}},"Syntax: asinit [project directory]\n\nSets up a new AssemblyScript project or updates an existing one.\n\nFor example, to create a new project in the current directory:\n\n  asinit .\n")),a.a.createElement(s.MDXTag,{name:"p",components:n},"Example output:"),a.a.createElement(s.MDXTag,{name:"pre",components:n},a.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{metaString:null}},"This command will make sure that the following files exist in the project\ndirectory '/home/user/mymodule':\n\n  ./assembly\n  Directory holding the AssemblyScript sources being compiled to WebAssembly.\n\n  ./assembly/tsconfig.json\n  TypeScript configuration inheriting recommended AssemblyScript settings.\n\n  ./assembly/index.ts\n  Exemplary entry file being compiled to WebAssembly to get you started.\n\n  ./build\n  Build artifact directory where compiled WebAssembly files are stored.\n\n  ./build/.gitignore\n  Git configuration that excludes compiled binaries from source control.\n\n  ./index.js\n  Main file loading the WebAssembly module and exporting its exports.\n\n  ./package.json\n  Package info containing the necessary commands to compile to WebAssembly.\n\nThe command will try to update existing files to match the correct settings\nfor this instance of the compiler in '/home/user/mymodule/node_modules/assemblyscript'.\n\nDo you want to proceed? [Y/n]\n\n- Making sure that the project directory exists...\n  Exists: /home/user/mymodule\n\n- Making sure that the 'assembly' directory exists...\n  Created: /home/user/mymodule/assembly\n\n- Making sure that 'assembly/tsconfig.json' is set up...\n  Created: /home/user/mymodule/assembly/tsconfig.json\n\n- Making sure that 'assembly/index.ts' exists...\n  Created: /home/user/mymodule/assembly/index.ts\n\n- Making sure that the 'build' directory exists...\n  Created: /home/user/mymodule/build\n\n- Making sure that 'build/.gitignore' is set up...\n  Created: /home/user/mymodule/build/.gitignore\n\n- Making sure that 'package.json' contains the build commands...\n  Created: /home/user/mymodule/package.json\n\n- Making sure that 'index.js' exists...\n  Created: /home/user/mymodule/index.js\n\nDone!\n\nTo edit the entry file, open 'assembly/index.ts' in your editor of choice.\nCreate as many additional files as necessary and use them as imports.\n\nTo build the entry file to WebAssembly when you are ready, run:\n\n  npm run asbuild\n\nRunning the command above creates the following binaries incl. their respective\ntext format representations and source maps:\n\n  ./build/untouched.wasm\n  ./build/untouched.wasm.map\n  ./build/untouched.wat\n\n  ^ The untouched WebAssembly module as generated by the compiler.\n    This one matches your sources exactly, without any optimizations.\n\n  ./build/optimized.wasm\n  ./build/optimized.wasm.map\n  ./build/optimized.wat\n\n  ^ The optimized WebAssembly module using default optimization settings (-O2s).\n    You can change the optimization settings in 'package.json'.\n\nAdditional documentation is available at the AssemblyScript wiki:\n\n  https://github.com/AssemblyScript/assemblyscript/wiki\n\nHave a nice day!\n")))}}}]);