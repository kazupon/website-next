(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"./docs/langs/en-US/documentation/faq.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),i=t("./node_modules/@mdx-js/tag/dist/index.js");function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;s(e,["components"]);return o.a.createElement(i.MDXTag,{name:"wrapper",components:n},o.a.createElement(i.MDXTag,{name:"h1",components:n,props:{id:"questions--answers"}},"Questions & Answers"),o.a.createElement(i.MDXTag,{name:"p",components:n},"A collection of answers to questions that appeared over time."),o.a.createElement(i.MDXTag,{name:"h3",components:n,props:{id:"whats-the-difference-between-an-ifelse-and-a-select"}},"What's the difference between an ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"h3"},"if/else")," and a ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"h3"},"select"),"?"),o.a.createElement(i.MDXTag,{name:"p",components:n},"Semantically, a ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"select")," differs from an ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"if/else")," in that both alternatives are always executed, then picking one of them depending on the condition. So if one side has side effects, it is going to happen regardless of the condition. Performance-wise, a ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"select")," (conditional move, works similar to a switch) is expected to be faster than an ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"if/else")," where the condition is random (that is, branch prediction is not going to perform well) and the operands are cheap. An ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"if/else")," where branch prediction is doing well, for example where checking a configuration value that is always the same, is expected to be fastest."),o.a.createElement(i.MDXTag,{name:"h3",components:n,props:{id:"does-it-support-a-main-function"}},"Does it support a ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"h3"},"main")," function?"),o.a.createElement(i.MDXTag,{name:"p",components:n},"Yes: By default, if no exported ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"main")," function is present, any top-level logic is executed on module instantiation. If an exported ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"main")," function, that is not generic or declared, is present, the compiler does not emit a ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"(start ...)")," entrypoint and instead executes top-level statements when ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"main")," is called."))}}}]);