(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"./docs/langs/en-US/getting-started/project-configuration.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js");function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;s(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"project-configuration"}},"Project Configuration"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Placing a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"tsconfig.json")," with the following contents next to your AssemblyScript sources (ideally in their own directory) will import all relevant types and configuration options. Note that the path to the base configuration file may vary depending on your actual setup."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"targeting-webassembly-only-with-asc"}},"Targeting WebAssembly only with ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"asc")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'{\n  "extends": "./node_modules/assemblyscript/std/assembly.json",\n  "include": [\n    "./**/*.ts"\n  ]\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Alternatively, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"std/assembly.d.ts")," can be referenced (does not inherit other important configuration settings)."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"targeting-both-webassembly-with-asc-and-javascript-with-tsc"}},"Targeting both WebAssembly with ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"asc")," and JavaScript with ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"tsc")),o.a.createElement(r.MDXTag,{name:"p",components:n},"See also: ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"./Writing-portable-code"}},"Writing portable code")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'{\n  "extends": "./node_modules/assemblyscript/std/portable.json",\n  "include": [\n    "./**/*.ts"\n  ]\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Alternatively, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"std/portable.d.ts")," can be referenced (does not inherit other important configuration settings)."))}}}]);