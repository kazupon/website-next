(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"./docs/langs/en-US/getting-started/quick-start.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),o=a.n(t),m=a("./node_modules/@mdx-js/tag/dist/index.js");function r(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},m=Object.keys(e);for(t=0;t<m.length;t++)a=m[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(t=0;t<m.length;t++)a=m[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}n.default=function(e){var n=e.components;r(e,["components"]);return o.a.createElement(m.MDXTag,{name:"wrapper",components:n},o.a.createElement(m.MDXTag,{name:"h1",components:n,props:{id:"quick-start-hello-world"}},"Quick Start (Hello World)"),o.a.createElement(m.MDXTag,{name:"p",components:n},"For a quick start, create a new node project with a ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"package.json")," as you normally would and follow these steps:"),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"Note:")," Once AssemblyScript is installed, ",o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"./Using-the-CLI#scaffolding-with-asinit"}},"there's also asinit")," that can do most of this for you automatically."),o.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"step-1"}},"Step 1"),o.a.createElement(m.MDXTag,{name:"p",components:n},"Install AssemblyScript as a development dependency by pointing npm at the GitHub repository (for now)"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{metaString:null}},"$> npm install --save-dev AssemblyScript/assemblyscript\n")),o.a.createElement(m.MDXTag,{name:"p",components:n},"and create a new top-level directory ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"assembly/")," for your AssemblyScript sources"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{metaString:null}},"$> mkdir assembly\n")),o.a.createElement(m.MDXTag,{name:"p",components:n},"that contains the following ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"tsconfig.json")),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'{\n  "extends": "../node_modules/assemblyscript/std/assembly.json",\n  "include": [\n    "./**/*.ts"\n  ]\n}\n')),o.a.createElement(m.MDXTag,{name:"p",components:n},"plus the following exemplary ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"module.ts")," entry file:"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ts",metaString:""}},"export function add(a: i32, b: i32): i32 {\n  return a + b;\n}\n")),o.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"step-2"}},"Step 2"),o.a.createElement(m.MDXTag,{name:"p",components:n},"Set up a build command by adding the following to your ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"package.json")," in your project's root directory"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'  "scripts": {\n    "build": "npm run build:untouched && npm run build:optimized",\n    "build:untouched": "asc assembly/module.ts -t module.untouched.wat -b module.untouched.wasm --validate --sourceMap --measure",\n    "build:optimized": "asc assembly/module.ts -t module.optimized.wat -b module.optimized.wasm --validate --sourceMap --measure --optimize"\n   }\n')),o.a.createElement(m.MDXTag,{name:"p",components:n},"and run"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{metaString:null}},"$> npm run build\n")),o.a.createElement(m.MDXTag,{name:"p",components:n},"to compile the entry file to both an untouched and an optimized WebAssembly binary (here: also text format and a source map)."),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"Note:")," If the build fails, it might be necessary (at this point) to ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"npm install --save-dev ts-node"),"."),o.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"step-3"}},"Step 3"),o.a.createElement(m.MDXTag,{name:"p",components:n},"Add a new file ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"module.js")," in your project's root directory"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},'const fs = require("fs");\nmodule.exports = new WebAssembly.Instance(new WebAssembly.Module(fs.readFileSync(__dirname + "/module.optimized.wasm"), {})).exports;\n')),o.a.createElement(m.MDXTag,{name:"p",components:n},"And that's it! This file allows you to use your WebAssembly module like any other node module, like so:"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},'var myModule = require("./module.js");\nconsole.log(myModule.add(1, 2));\n')),o.a.createElement(m.MDXTag,{name:"p",components:n},"See the other pages of the wiki for additional information. Happy coding!"))}}}]);